{"componentChunkName":"component---src-pages-viewer-authentication-api-using-viewer-authentication-with-other-services-mdx","path":"/viewer-authentication-api-using-viewer-authentication-with-other-services/","result":{"pageContext":{"frontmatter":{"title":"Using viewer authentication with other services","description":"Using viewer authentication with other services"},"relativePagePath":"/viewer-authentication-api-using-viewer-authentication-with-other-services.mdx","titleType":"page","MdxNode":{"id":"9b3a5642-cccf-5d17-9112-13f6d49cc0d6","children":[],"parent":"90b40ba1-db24-52d7-a50b-116383f008fc","internal":{"content":"---\ntitle: Using viewer authentication with other services\ndescription: Using viewer authentication with other services\n---\n\nBesides the player there are some services (such as Chat, Q&A and Combined Embed) that may also require viewer authentication. In order to make the authentication work across these services, additional steps need to be taken at the end of the authentication flow.\n\nThese services provide a URL, that must be used instead of the default pass url. This URL is sent in the hashConsumer query parameter by the service to the application.\n\nExample url in the hashConsumer for chat:\n\n```\nhttps://video.ibm.com/chat/authorize/12345678?resource=%2Fchat%2F12345678\n```\n\nExample script in native PHP that can authenticate the player and the services as well\n\n```js\n// Given a json token has already been constructed\n$json = json_encode($response);\n\n// Default hash consumer for the player\n$hashConsumer = 'https://video.ibm.com/embed/hashlock/pass';\n$query = [];\n\n// Check if there is a special hash consumer\nif (!empty($_GET['hashConsumer'])) {\n    $hashConsumer = $_GET['hashConsumer'];\n\n    // It's recommended to use a better URL parsing\n    // technique (like PSR-7 implementations)\n    $parts = parse_url($hashConsumer);\n\n    if (!empty($parts['query'])) {\n        parse_str($parts['query'], $query);\n    }\n\n    // Instead of concatenating url parts it's recommended to use\n    // a better URL parsing technique (like PSR-7 implementations)\n    $hashConsumer = $parts['scheme'].'://'.$parts['host'].$parts['path'];\n}\n\n$query['hash'] = $json;\n\n$hashConsumer = $hashConsumer.'?'.http_build_query($query);\n\nheader('Location: '.$hashConsumer);\n```\n","type":"Mdx","contentDigest":"0d1c780be87ccb31a2ecc02938824eb8","counter":333,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Using viewer authentication with other services","description":"Using viewer authentication with other services"},"exports":{},"rawBody":"---\ntitle: Using viewer authentication with other services\ndescription: Using viewer authentication with other services\n---\n\nBesides the player there are some services (such as Chat, Q&A and Combined Embed) that may also require viewer authentication. In order to make the authentication work across these services, additional steps need to be taken at the end of the authentication flow.\n\nThese services provide a URL, that must be used instead of the default pass url. This URL is sent in the hashConsumer query parameter by the service to the application.\n\nExample url in the hashConsumer for chat:\n\n```\nhttps://video.ibm.com/chat/authorize/12345678?resource=%2Fchat%2F12345678\n```\n\nExample script in native PHP that can authenticate the player and the services as well\n\n```js\n// Given a json token has already been constructed\n$json = json_encode($response);\n\n// Default hash consumer for the player\n$hashConsumer = 'https://video.ibm.com/embed/hashlock/pass';\n$query = [];\n\n// Check if there is a special hash consumer\nif (!empty($_GET['hashConsumer'])) {\n    $hashConsumer = $_GET['hashConsumer'];\n\n    // It's recommended to use a better URL parsing\n    // technique (like PSR-7 implementations)\n    $parts = parse_url($hashConsumer);\n\n    if (!empty($parts['query'])) {\n        parse_str($parts['query'], $query);\n    }\n\n    // Instead of concatenating url parts it's recommended to use\n    // a better URL parsing technique (like PSR-7 implementations)\n    $hashConsumer = $parts['scheme'].'://'.$parts['host'].$parts['path'];\n}\n\n$query['hash'] = $json;\n\n$hashConsumer = $hashConsumer.'?'.http_build_query($query);\n\nheader('Location: '.$hashConsumer);\n```\n","fileAbsolutePath":"/home/travis/build/IBM/video-streaming-developer-docs/src/pages/viewer-authentication-api-using-viewer-authentication-with-other-services.mdx"}}}}